/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.panel;

import controllers.AudioController;
import controllers.ListPanelController;
import controllers.SongDetailController;
import controllers.ViewController;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import models.Singer;
import models.Song;
import views.MainFrame;
import views.panel.SubSearchPanel.SongPanel;
import views.panel.SubSearchPanel.SubTitlePanel;
import views.panel.SubSearchPanel.ViewFullPanel;

/**
 *
 * @author linhd
 */
public class SearchPanel extends javax.swing.JPanel {

    /**
     * Creates new form AlbumPanel
     */
    
    public SearchPanel(MainFrame frame, ArrayList<Song> listSong, ArrayList<Singer> listSinger) {
        initComponents();
        setLayout(new BorderLayout());        
        JPanel panel = createSearchPanel(frame, listSong, listSinger);
        
        JScrollPane sp1 = new JScrollPane(panel);
        add(sp1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 559, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 352, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    private JPanel createSearchPanel(MainFrame frame, ArrayList<Song> listSong, ArrayList<Singer> listSinger) {
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        
        panel.add(createListPanel(frame, listSong, listSinger));
        
        
        return panel;
    }
    
    private JPanel createListPanel(MainFrame frame, ArrayList<Song> listSong, ArrayList<Singer> listSinger) {
        JPanel panel = new JPanel();
        
        int row1 = 0, row2 = 0;
        
        if (listSong != null) {
            if (listSinger != null) 
                row1 = listSong.size() < 3 ? listSong.size() : 3;
            else 
                row1 = listSong.size();
        }
            
        if (listSinger != null) {
            if (listSong != null) 
                row2 = listSinger.size() < 3 ? listSinger.size() : 3;
            else 
                row2 = listSinger.size();
        }
            
        int rows = row1 + 2 + row2 + 2;
        rows = rows < 10 ? 10 : rows;
        
        if (listSong == null) {
            rows -= (row1 + 2);
            row1 = -1;            
        }
        if (listSinger == null) {
            rows -= (row2 + 2);
            row2 = -1;
        }
        
        panel.setLayout(new GridLayout(rows, 1, 0, 0));                  
        
        int cnt = 0;
        for (int i = 0; i <= row1; ++i) {
            if (i == 0) {
                // add title song
                panel.add(new SubTitlePanel("Bài Hát (" + listSong.size() + ")"));
                cnt++;
            }
            else {
                Song s = listSong.get(i - 1);
                SongPanel sp = new SongPanel();
                sp.setName_song(s.getName());
                // set Singer
                StringBuilder str = new StringBuilder();
                for (Singer singer : s.getSinger())
                    str.append(singer.getName()).append(", ");                         
                if (str.length() != 0)
                    sp.setSinger(str.substring(0, str.length() - 2));    
                else 
                    sp.setSinger("");
                panel.add(sp);                
                if (((i - 1) & 1) == 0) {
                    sp.setBackground(new Color(41, 41, 39));
                }
                // add general list event
                ListPanelController controller = new ListPanelController(frame, sp);
                controller.init();
                
                PlayButttonClickEvent e = new PlayButttonClickEvent(frame, listSong, s, i - 1);
                sp.getPlay().addMouseListener(e);
                
                MouseDoubleClickEvent pme = new MouseDoubleClickEvent(frame, listSong, s, i - 1);
                sp.addMouseListener(pme);
                
                cnt++;
            }
        }
        
        // see all song
        ViewFullPanel fullSong = new ViewFullPanel();        
        
        if (listSong != null && listSong.size() > row1) {                        
            panel.add(fullSong);
            cnt++;
        }
        for (int i = 0; i <= row2; ++i) {
            if (i == 0) {
                // add title singer 
                panel.add(new SubTitlePanel("Ca Sĩ (" + listSinger.size() + ")"));
                cnt++;
            } else {
                cnt++;
                Singer s = listSinger.get(i - 1);                
                views.panel.SubSearchPanel.SingerPanel sp = new views.panel.SubSearchPanel.SingerPanel();
                sp.setName_singer(s.getName());
                panel.add(sp);                
                if (((i - 1) & 1) == 0) {
                    sp.setBackground(new Color(41, 41, 39));
                }
                // add general list event
                ListPanelController controller = new ListPanelController(frame, sp);
                controller.init();

                // add event singer 
                sp.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        ViewController cvc = new ViewController(frame);
                        try {
                            cvc.setSingerDetail(s);
                        } catch (SQLException ex) {
                            Logger.getLogger(SearchPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });     
            }
        }
        // see all singer
        ViewFullPanel fullSinger = new ViewFullPanel();
        if (listSinger != null && listSinger.size() > row2) {            
            panel.add(fullSinger); 
            cnt++;
        }
        int k = cnt + 1;
        while (k <= rows) {
            views.panel.SubSearchPanel.SingerPanel sp = new views.panel.SubSearchPanel.SingerPanel();
            sp.setName_singer("");
            panel.add(sp);
            ++k;
        }         
        
        // add event see full song or singer
        if (listSong != null && listSinger != null) {
            ArrayList <Object> listS = new ArrayList<>(listSong);
            ArrayList <Object> listSg = new ArrayList<>(listSinger);
            fullSong.getAllSearch().addMouseListener(new FullSearch(frame, listS, "Song"));
            fullSinger.getAllSearch().addMouseListener(new FullSearch(frame, listSg, "Singer"));
        }
        
        
        
        return panel;
    }   
    
    private class FullSearch extends MouseAdapter {
        
        private String kind;
        private MainFrame frame;
        private ArrayList <Object> list;

        
        public FullSearch(MainFrame frame, ArrayList <Object> list, String kind) {
            this.kind = kind;  
            this.frame = frame;
            this.list = list;
  
        }
        
        @Override
        public void mouseEntered(MouseEvent e) {
            JPanel p = (JPanel) e.getSource();
            p.setBackground(Color.gray);
        }
        @Override
        public void mouseExited(MouseEvent e) {
            JPanel p = (JPanel) e.getSource();
            p.setBackground(new Color(51, 51, 51));
        }
        @Override
        public void mouseClicked(MouseEvent e) {
            ViewController viewController = new ViewController(frame);
            viewController.setAllSearchPanel(list, kind);
        }
    }
    
    private class PlayButttonClickEvent extends MouseAdapter {

        private MainFrame frame;
        private ArrayList<Song> listSong;
        private Song song;
        private int cur;

        public PlayButttonClickEvent(MainFrame frame, ArrayList<Song> listSong, Song s, int cur) {
            this.frame = frame;
            this.listSong = listSong;
            this.song = s;
            this.cur = cur;
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            JPanel p = (JPanel) e.getSource();
            p.setOpaque(true);
            p.setBackground(Color.gray);
        }

        @Override
        public void mouseExited(MouseEvent e) {
            JPanel p = (JPanel) e.getSource();
            p.setOpaque(false);
        }

        @Override
        public void mouseClicked(MouseEvent e) {

            frame.getSong_playing_panel().setVisible(true);                                    
            
            AudioController audio = AudioController.getIntance();    
            
            audio.setPlaylist(listSong);
            audio.setCurrent_song(song);
            audio.setIndex(cur);
            audio.setKind("Music");
            audio.setId_playlist(-1);
            audio.play();
            
            frame.getPlay_label().setIcon(new ImageIcon(getClass().getResource("/images/icons8_pause_30px.png")));
            
            Map <String, String> songDetail = SongDetailController.getSongDetail(song);
            
            frame.getSong_playing_name().setText(songDetail.get("title"));
            frame.getSong_playing_singer().setText(songDetail.get("author"));
        }
    }

    private class MouseDoubleClickEvent extends MouseAdapter {

        private MainFrame frame;
        private ArrayList<Song> listSong;
        private Song song;
        private int cur;

        public MouseDoubleClickEvent(MainFrame frame, ArrayList<Song> listSong, Song s, int cur) {
            this.frame = frame;
            this.listSong = listSong;
            this.song = s;
            this.cur = cur;
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 2) {

                frame.getSong_playing_panel().setVisible(true);                                    
            
                AudioController audio = AudioController.getIntance();                        
                audio.setPlaylist(listSong);
                audio.setCurrent_song(song);
                audio.setIndex(cur);
                audio.setKind("Music");
                audio.setId_playlist(-1);
                audio.play();

                frame.getPlay_label().setIcon(new ImageIcon(getClass().getResource("/images/icons8_pause_30px.png")));

                Map <String, String> songDetail = SongDetailController.getSongDetail(song);

                frame.getSong_playing_name().setText(songDetail.get("title"));
                frame.getSong_playing_singer().setText(songDetail.get("author"));
            }
        }
    }
}