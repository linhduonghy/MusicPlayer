/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.panel.SubPlaylistPanel;

import DatabaseQuery.PlaylistQuery;
import controllers.PlayingController;
import controllers.ViewController;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import models.Playlist;
import models.User;
import views.MainFrame;

/**
 *
 * @author linhd
 */
public class SubPlaylistPanel extends javax.swing.JPanel {

    /**
     * Creates new form SubPlaylistPanel
     * @param user
     * @param frame
     * @param urlImage
     * @param playlist
     */
    public SubPlaylistPanel(User user, MainFrame frame, String urlImage, Playlist playlist, int id) {
        initComponents();
        
        if (urlImage != null)
            this.image.setIcon(new ImageIcon(urlImage));
        this.name.setText(playlist.getName());
        this.name.setEditable(false);
        
        JPopupMenu jpm = new JPopupMenu("Choose");        

        JMenuItem item1 = new JMenuItem("Delete");
        JMenuItem item2 = new JMenuItem("Rename");
        
        jpm.add(item1); jpm.add(item2);         
        
        item1.addActionListener(new EventDelete(user, frame, playlist));
        item2.addActionListener(new EventRename(user, frame, playlist, name));
                                
        LinkToPlaylist linkToPlaylist = new LinkToPlaylist(jpm, frame, playlist, id);    
        image.addMouseListener(linkToPlaylist);  
        name.addMouseListener(linkToPlaylist);
    }

    

    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        image_panel = new javax.swing.JPanel();
        image = new javax.swing.JLabel();
        name_panel = new javax.swing.JPanel();
        name = new javax.swing.JTextField();

        setBackground(new java.awt.Color(102, 102, 102));

        image_panel.setOpaque(false);

        image.setBackground(new java.awt.Color(153, 153, 153));
        image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/yn.PNG"))); // NOI18N
        image.setOpaque(true);

        javax.swing.GroupLayout image_panelLayout = new javax.swing.GroupLayout(image_panel);
        image_panel.setLayout(image_panelLayout);
        image_panelLayout.setHorizontalGroup(
            image_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(image_panelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(image)
                .addGap(0, 0, 0))
        );
        image_panelLayout.setVerticalGroup(
            image_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(image, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        name_panel.setBackground(new java.awt.Color(153, 153, 153));

        name.setBackground(new java.awt.Color(102, 102, 102));
        name.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        name.setForeground(new java.awt.Color(255, 255, 255));
        name.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout name_panelLayout = new javax.swing.GroupLayout(name_panel);
        name_panel.setLayout(name_panelLayout);
        name_panelLayout.setHorizontalGroup(
            name_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        name_panelLayout.setVerticalGroup(
            name_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, name_panelLayout.createSequentialGroup()
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(image_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(name_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(image_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(name_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel image;
    private javax.swing.JPanel image_panel;
    private javax.swing.JTextField name;
    private javax.swing.JPanel name_panel;
    // End of variables declaration//GEN-END:variables
    
    private class EventDelete implements ActionListener {
        private User user;
        private MainFrame frame;
        private Playlist playlist;
        public EventDelete(User user, MainFrame frame, Playlist playlist) {
            this.user = user;
            this.frame = frame;
            this.playlist = playlist;
        }
                       
        @Override
        public void actionPerformed(ActionEvent e) {
            int result = JOptionPane.showConfirmDialog(null, "Xóa playlist " + playlist.getName() + " ?", "Confirm",
                    JOptionPane.YES_NO_OPTION);
            if (result == 0) {
                PlaylistQuery pq = new PlaylistQuery();
                try {
                    pq.deletePlaylist(playlist);

                } catch (SQLException ex) {
                    Logger.getLogger(SubPlaylistPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                ViewController vc = new ViewController(frame);
                ArrayList<Playlist> playlists = null;

                try {
                    playlists = pq.getPlaylistsByUser(user);
                } catch (SQLException ex) {
                    Logger.getLogger(SubPlaylistPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                vc.setPlayLists(playlists);
                JOptionPane.showMessageDialog(null, "Đã xóa " + playlist.getName());
            }

        }
    }
    
    private static class EventRename implements ActionListener {
        private User user;
        private MainFrame frame;
        private Playlist playlist;
        private JTextField name;
        public EventRename(User user, MainFrame frame, Playlist playlist, JTextField name) {
            this.user = user;
            this.frame = frame;
            this.playlist = playlist;
            this.name = name;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            
            name.setText("");
            name.setRequestFocusEnabled(true);            
            name.setEditable(true);
            name.setBackground(Color.white);
            name.setForeground(Color.black);
            name.requestFocus();

            name.addKeyListener(new KeyAdapter() {
                @Override
                public void keyTyped(KeyEvent e) {
                    if (e.getKeyChar() == KeyEvent.VK_ENTER) {
                        PlaylistQuery pq = new PlaylistQuery();
                        String t = name.getText();
                        if (t.trim().equals("")) {
                            JOptionPane.showMessageDialog(null, "Nhập tên cần sửa");
                        }
                        else {
                            try {
                            pq.renamePlaylist(playlist, t);
                            } catch (SQLException ex) {
                                Logger.getLogger(SubPlaylistPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            ArrayList<Playlist> playlists = null;

                            try {
                                playlists = pq.getPlaylistsByUser(user);
                            } catch (SQLException ex) {
                                Logger.getLogger(SubPlaylistPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            ViewController vc = new ViewController(frame);
                            vc.setPlayLists(playlists);
                        }
                    }
                }
            });
            PlaylistQuery pq = new PlaylistQuery();
        }        
    }
    
    private class LinkToPlaylist extends MouseAdapter {
        
        private MainFrame frame;                
        private Playlist playlist;
        private JPopupMenu jpm;
        private int id;
        
        public LinkToPlaylist(JPopupMenu jpm, MainFrame frame, Playlist playlist, int id) {
            this.frame = frame;
            this.playlist = playlist;
            this.jpm = jpm;
            this.id = id;
        }       
          
        public void mouseEntered(MouseEvent e) {
            
        }
        public void mouseReleased(MouseEvent e) {
            
        }
        @Override
        public void mouseClicked(MouseEvent e) {
            
            if (SwingUtilities.isRightMouseButton(e)) {
                
                jpm.show(image, e.getX(), e.getY());
            }
            else {                
                ViewController cvc = new ViewController(frame);
                try {
                    cvc.setPlayListDetail(playlist);
                } catch (SQLException ex) {
                    Logger.getLogger(SubPlaylistPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        }
    }
    
}
