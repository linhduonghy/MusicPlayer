/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.panel.SubPlaylistPanel;

import DatabaseQuery.PlaylistQuery;
import controllers.AudioController;
import controllers.ListPanelController;
import controllers.SongDetailController;
import controllers.ViewController;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.util.ArrayList;
import java.util.Map;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

import models.Playlist;
import models.Singer;
import models.Song;
import views.MainFrame;

/**
 *
 * @author linhd
 */
public class PlaylistDetailPanel extends javax.swing.JPanel {

    /**
     * Creates new form test
     */
    public PlaylistDetailPanel( MainFrame frame, Playlist playlist, ArrayList <Song> listSong) {
        initComponents();
        setLayout(new BorderLayout());
        JScrollPane sc = new JScrollPane(createListMusic(frame, playlist, listSong));            
        add(sc);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        main_view = new javax.swing.JPanel();

        main_view.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout main_viewLayout = new javax.swing.GroupLayout(main_view);
        main_view.setLayout(main_viewLayout);
        main_viewLayout.setHorizontalGroup(
            main_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 481, Short.MAX_VALUE)
        );
        main_viewLayout.setVerticalGroup(
            main_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 268, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel main_view;
    // End of variables declaration//GEN-END:variables
    public JPanel getMain_view() {
        return main_view;
    }
    private JPanel createListMusic(MainFrame frame, Playlist playlist, ArrayList<Song> listSong) {
        JPanel panel = new JPanel();
        ArrayList <SongPlaylistPanel> list = new ArrayList<>();
        for (Song song : listSong) {
            SongPlaylistPanel s = new SongPlaylistPanel(frame);
            s.setTextName(song.getName());
            
            // set Singer
            StringBuilder str = new StringBuilder();
            for (Singer singer : song.getSinger())
                str.append(singer.getName() + ",");                         
            if (str.length() != 0)
                s.setSinger(str.substring(0, str.length() - 1));    
            else 
                s.setSinger("");
                        
            list.add(s);  
            
        }    
        
        int rows = list.size() > 10 ? list.size() : 10;
        panel.setLayout(new GridLayout(rows, 1, 0, 0));   
                
        AudioController audio = AudioController.getIntance();
        
        for (int i = 0; i < rows; ++i) {
            if (i < list.size()) {
                Song s = listSong.get(i);
                SongPlaylistPanel p1 = list.get(i); 
                panel.add(p1);
                
                if (i % 2 == 0) 
                    p1.setBackground(new Color(41, 41, 39)); 
                
                Color old  = p1.getBackground();
                
                JPanel remove = p1.getRemove();
                remove.setBackground(old);
                
                RemoveMouseListener removeEvent = new RemoveMouseListener(frame, playlist, listSong, s, i);                
                remove.addMouseListener(removeEvent);
                
                
                // add event list panel
                ListPanelController lpc = new ListPanelController(frame, p1);
                lpc.init();
                
                PlayButttonClickEvent e = new PlayButttonClickEvent(frame, playlist, listSong, listSong.get(i), i);
                p1.getPlay().addMouseListener(e);

                MouseDoubleClickEvent pme = new MouseDoubleClickEvent(frame, playlist, listSong, listSong.get(i), i);
                p1.addMouseListener(pme);
                                
            } else {
                SongPlaylistEmptyPanel p = new SongPlaylistEmptyPanel();
                panel.add(p);
            }
        } 
        
        return panel;
    }    
    
    private class RemoveMouseListener extends MouseAdapter{
        private MainFrame frame;
        private Playlist playlist;
        private ArrayList <Song> listSong;
        private Song s;
        private int cur;
        public RemoveMouseListener(MainFrame frame, Playlist playlist, ArrayList<Song> listSong, Song s, int cur) {
            this.frame = frame;
            this.playlist = playlist;
            this.listSong = listSong;
            this.cur = cur;
            this.s = s;
        }
        
        @Override
        public void mouseEntered(MouseEvent e) {
            JPanel remove = (JPanel) e.getSource();
            remove.setOpaque(true);
            remove.setBackground(Color.gray);
        }

        @Override
        public void mouseExited(MouseEvent e) {
            JPanel remove = (JPanel) e.getSource();
            remove.setOpaque(false);
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            int res = JOptionPane.showConfirmDialog(null, "Xóa bài hát", "Confirm", JOptionPane.YES_NO_OPTION);
            if (res == 0) {
                PlaylistQuery query = new PlaylistQuery();
                boolean ok = query.removeSongOfPlaylist(playlist, s);
                if (ok) {                                         
                    listSong.remove(cur);
                    ViewController cvc = new ViewController(frame);                                        
                    cvc.setPlayListDetail(playlist, listSong);
                    
                    AudioController audio = AudioController.getIntance();
                    if (audio.getKind().equals("Playlist") && audio.getId_playlist() == playlist.getId()) {
                        audio.setPlaylist(listSong); 
                        
                        if (cur == audio.getIndex()) { // remove current song playing                            
                            audio.play();
                            
                        } else if (cur < audio.getIndex()) {
                            audio.setIndex(audio.getIndex() - 1);
                        } else {
                            
                        }
                    } 
                    JOptionPane.showMessageDialog(frame.getView_panel(), "Xóa bài hát thành công");
                } else {
                    JOptionPane.showMessageDialog(frame.getView_panel(), "Xóa bài hát thất bại");
                }
            }
        }
    }
    private class PlayButttonClickEvent extends MouseAdapter {

        private MainFrame frame;
        private ArrayList<Song> listSong;
        private Playlist playlist;
        private Song song;
        private int cur;
        
        public PlayButttonClickEvent(MainFrame frame, Playlist playlist, ArrayList<Song> listSong, Song s, int cur) {
            this.frame = frame;
            this.listSong = listSong;
            this.playlist = playlist;
            this.song = s;
            this.cur = cur;
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            JPanel p = (JPanel) e.getSource();
            p.setOpaque(true);
            p.setBackground(Color.gray);
        }

        @Override
        public void mouseExited(MouseEvent e) {
            JPanel p = (JPanel) e.getSource();
            p.setOpaque(false);
        }

        @Override
        public void mouseClicked(MouseEvent e) {

            frame.getSong_playing_panel().setVisible(true);                                    
            
            AudioController audio = AudioController.getIntance();                        
            audio.setPlaylist(listSong);
            audio.setCurrent_song(song);
            audio.setIndex(cur);
            audio.setKind("Playlist");
            audio.setId_playlist(playlist.getId());
            audio.play();
            
            frame.getPlay_label().setIcon(new ImageIcon(getClass().getResource("/images/icons8_pause_30px.png")));
            
            Map <String, String> songDetail = SongDetailController.getSongDetail(song);
            
            frame.getSong_playing_name().setText(songDetail.get("title"));
            frame.getSong_playing_singer().setText(songDetail.get("author"));
        }
    }

    private class MouseDoubleClickEvent extends MouseAdapter {

        private MainFrame frame;
        private ArrayList<Song> listSong;
        private Playlist playlist;
        private Song song;
        private int cur;
       
        public MouseDoubleClickEvent(MainFrame frame, Playlist playlist, ArrayList<Song> listSong, Song s, int cur) {
            this.frame = frame;
            this.listSong = listSong;
            this.playlist = playlist;
            this.song = s;
            this.cur = cur;
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 2) {

                frame.getSong_playing_panel().setVisible(true);                                    
            
                AudioController audio = AudioController.getIntance();                        
                audio.setPlaylist(listSong);
                audio.setCurrent_song(song);
                audio.setIndex(cur);
                audio.setKind("Playlist");
                audio.setId_playlist(playlist.getId());
                audio.play();

                frame.getPlay_label().setIcon(new ImageIcon(getClass().getResource("/images/icons8_pause_30px.png")));

                Map <String, String> songDetail = SongDetailController.getSongDetail(song);

                frame.getSong_playing_name().setText(songDetail.get("title"));
                frame.getSong_playing_singer().setText(songDetail.get("author"));
            }
        }
    }
}


