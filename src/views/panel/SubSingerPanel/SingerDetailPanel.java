/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.panel.SubSingerPanel;

import DatabaseQuery.PlaylistQuery;
import controllers.AudioController;
import controllers.ListPanelController;
import controllers.SongDetailController;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import models.Playlist;
import models.Singer;
import models.Song;
import views.MainFrame;

/**
 *
 * @author linhd
 */
public class SingerDetailPanel extends javax.swing.JPanel {

    /**
     * Creates new form SingerDetailPanel
     * @param frame
     * @param listSong
     * @throws java.sql.SQLException
     */
    public SingerDetailPanel(MainFrame frame, ArrayList<Song> listSong) throws SQLException {
        initComponents();
        setLayout(new BorderLayout());
        JPanel p = createSingerDetailPanel(frame, listSong);
        JScrollPane sp = new JScrollPane(p);
        
        add(sp);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 297, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private JPanel createSingerDetailPanel(MainFrame frame, ArrayList<Song> listSong) throws SQLException {
        JPanel panel = new JPanel();
        
        ArrayList <SubSingerDetailPanel> list = new ArrayList<>();
        for (Song song: listSong) {
            SubSingerDetailPanel s = new SubSingerDetailPanel();            
            s.setNamee(song.getName());           
            
            // set Singer
            StringBuilder str = new StringBuilder();
            for (Singer singer : song.getSinger())
                str.append(singer.getName()).append(", ");                         
            if (str.length() != 0)
                s.setSinger(str.substring(0, str.length() - 2));    
            else 
                s.setSinger(""); 
            
            //s.setTime(song.getTime() != null ? song.getTime() : "3:12");
            
            list.add(s);  
        }
        
        int rows = list.size() > 10 ? list.size() : 10;
        
        panel.setLayout(new GridLayout(rows, 1, 0, 0));
        
        
        
        for (int i = 0; i < rows; ++i) {            
            if (i < list.size()) {                
                Song s = listSong.get(i);
                SubSingerDetailPanel p1 = list.get(i);
                if ((i & 1) == 0) 
                    p1.setBackground(new Color(41, 41, 39));
                
                panel.add(p1);     
                
                // set general event list panel
                ListPanelController spc = new ListPanelController(frame, p1);
                spc.init();
                
                PlayButttonClickEvent e = new PlayButttonClickEvent(frame, listSong, listSong.get(i), i);
                p1.getPlay().addMouseListener(e);

                MouseDoubleClickEvent pme = new MouseDoubleClickEvent(frame, listSong, listSong.get(i), i);
                p1.addMouseListener(pme);
            } else {
                SubSingerDetailEmptyPanel s = new SubSingerDetailEmptyPanel();                                
                panel.add(s);
            }
        }
        
        ArrayList <JMenuBar> listMenu = new ArrayList<>();
        
        // set event add song to playlist
        for (int i = 0; i < list.size(); ++i) {
            SubSingerDetailPanel p1 = list.get(i);
            Song s = listSong.get(i);
            PlaylistQuery pq = new PlaylistQuery();                
            ArrayList <Playlist> playlists = pq.getPlaylistsByUser(frame.getUser()); 
            
            // set color add btn & optional list
            Color c = p1.getBackground();
            JPanel add_playlist = p1.getAdd_playlist();
            
            add_playlist.setBackground(c);
            JPanel optional_list = p1.getOptional_list();
            optional_list.setBackground(c);
            
            JMenuBar menubar = new JMenuBar();
            listMenu.add(menubar);
            p1.add(menubar);
            menubar.setVisible(false);
            
            add_playlist.addMouseListener(new MouseAdapter() {

                @Override
                public void mouseEntered(MouseEvent e) {
                    add_playlist.setOpaque(true);
                    add_playlist.setBackground(Color.gray);
                }
                @Override
                public void mouseExited(MouseEvent e) {
                    add_playlist.setOpaque(false);
                }
                @Override
                public void mouseClicked(MouseEvent e) {
                    
                                                                                
                    // if playlists not empty
                    if (list != null && !list.isEmpty()) {
                        // set visible menubar when clicked add btn
                        menubar.setVisible(true);
                        menubar.removeAll();                                              
                        menubar.setBounds(p1.getOptional_list().getBounds());   
                        
                        JMenu menu = new JMenu("Choose");    
                        menubar.add(menu);   
                        
                        for (int i = 0; i < playlists.size(); ++i) {
                            Playlist p = playlists.get(i);
                            JMenuItem menuItem = new JMenuItem(p.getName());                    
                            menu.add(menuItem);
                            
                            // query database when clicked item list
                            menuItem.addActionListener((ActionEvent e1) -> {
                                menubar.setVisible(false);
                                PlaylistQuery query = new PlaylistQuery(); 
                                                                
                                try {
                                    boolean ok = query.addSongToPlayList(p, s);                                    
                                    if (!ok) {
                                        JOptionPane.showMessageDialog(frame.getView_panel(), "Bài hát đã tồn tại trong playlist "
                                                + p.getName());
                                    } else {                                       
                                        AudioController audio = AudioController.getIntance();                                        
                                        if (audio.getKind().equals("Playlist") && audio.getId_playlist() == p.getId()) {
                                            audio.addSong(s);
                                        }
                                        JOptionPane.showMessageDialog(frame.getView_panel(), "Thêm bài hát thành công");
                                    }
                                } catch (SQLException ex) {}
                            });
                            
                        }
                    }  
                }
            });
        }
        
        for (int i = 0; i < list.size(); ++i) {  
            SubSingerDetailPanel p = list.get(i);
            // hidden all menubar when clicked main panel
            p.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    for (JMenuBar menubar : listMenu) 
                        menubar.setVisible(false);
                }
            });
        }
        for (int i = 0; i < list.size(); ++i) {
            SubSingerDetailPanel p = list.get(i);
            int j = i;
            // hidden all menubar when clicked main panel
            p.getAdd_playlist().addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    for (int k = 0; k < listMenu.size(); ++k) 
                        if (j != k) 
                            listMenu.get(k).setVisible(false);
                }
            });
        }
        
        /*
        add list song to panel null layout
        
        panel.setLayout(null);        
        
        for (int i = 0; i < list.size(); ++i) {
            SubSingerDetailPanel s = list.get(i);
            if ((i & 1) == 0) {
                s.setBackground(new Color(41, 41, 39));
            }
            int w = (int) frame.getView_panel().getWidth();
            
            s.setBounds(panel.getX(), panel.getY() + (int)s.getPreferredSize().getHeight() * i, w, 
                    (int)s.getPreferredSize().getHeight());
            panel.add(s);
            
            ListPanelController spc = new ListPanelController(frame, s);
            spc.init();
            
        }*/
        
        
        return panel;
    }
    private class PlayButttonClickEvent extends MouseAdapter {

        private MainFrame frame;
        private ArrayList<Song> listSong;
        private Song song;
        private int cur;

        public PlayButttonClickEvent(MainFrame frame, ArrayList<Song> listSong, Song s, int cur) {
            this.frame = frame;
            this.listSong = listSong;
            this.song = s;
            this.cur = cur;
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            JPanel p = (JPanel) e.getSource();
            p.setOpaque(true);
            p.setBackground(Color.gray);
        }

        @Override
        public void mouseExited(MouseEvent e) {
            JPanel p = (JPanel) e.getSource();
            p.setOpaque(false);
        }

        @Override
        public void mouseClicked(MouseEvent e) {

            frame.getSong_playing_panel().setVisible(true);                                    
            
            AudioController audio = AudioController.getIntance();
            audio.setPlaylist(listSong);
            audio.setCurrent_song(song);
            audio.setIndex(cur);
            audio.setKind("Music");
            audio.setId_playlist(-1);
            audio.play();
            
            frame.getPlay_label().setIcon(new ImageIcon(getClass().getResource("/images/icons8_pause_30px.png")));
            
            Map <String, String> songDetail = SongDetailController.getSongDetail(song);
            
            frame.getSong_playing_name().setText(songDetail.get("title"));
            frame.getSong_playing_singer().setText(songDetail.get("author"));
        }
    }

    private class MouseDoubleClickEvent extends MouseAdapter {

        private MainFrame frame;
        private ArrayList<Song> listSong;
        private Song song;
        private int cur;

        public MouseDoubleClickEvent(MainFrame frame, ArrayList<Song> listSong, Song s, int cur) {
            this.frame = frame;
            this.listSong = listSong;
            this.song = s;
            this.cur = cur;
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 2) {

                frame.getSong_playing_panel().setVisible(true);                                    
            
                AudioController audio = AudioController.getIntance();
                audio.setPlaylist(listSong);
                audio.setCurrent_song(song);
                audio.setIndex(cur);
                audio.setKind("Music");
                audio.setId_playlist(-1);
                audio.play();

                frame.getPlay_label().setIcon(new ImageIcon(getClass().getResource("/images/icons8_pause_30px.png")));

                Map <String, String> songDetail = SongDetailController.getSongDetail(song);

                frame.getSong_playing_name().setText(songDetail.get("title"));
                frame.getSong_playing_singer().setText(songDetail.get("author"));
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
