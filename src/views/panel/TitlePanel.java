/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.panel;

import DatabaseQuery.PlaylistQuery;
import controllers.AudioController;
import controllers.PlayingController;
import controllers.ViewController;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javazoom.jlgui.basicplayer.BasicPlayer;
import models.Playlist;
import models.Song;
import models.User;
import views.MainFrame;

/**
 *
 * @author linhd
 */
public class TitlePanel extends javax.swing.JPanel {

    private ArrayList <Playlist> playlists;
    private PlayingController pc;
    
    /**
     * Creates new form TitlePanel
     */
    public TitlePanel(String title) {
        initComponents();
        this.title.setText(title);
        name_playlist.setVisible(false);
        btn.setVisible(false);
    }
    
    /*
        initialize Title Panel Of Music Panel and Playlist Detail Panel
    */
    public TitlePanel(String title, String playAll, MainFrame frame, ArrayList<Song> listSong, Playlist playlist) {
        initComponents();
        this.title.setText(title);
        name_playlist.setVisible(false);
        play_all.setVisible(true);
        play_all.setText(playAll);
        btn.setVisible(false);
        
        
        
        play_all.addMouseListener(new MouseAdapter() {
            
            @Override
            public void mouseEntered(MouseEvent e) {
                play_all.setOpaque(true);
                play_all.setBackground(Color.gray);
            }
            @Override
            public void mouseExited(MouseEvent e) {
                play_all.setOpaque(false);
                play_all.setBackground(Color.black);
            }
            @Override
            public void mouseClicked(MouseEvent e) {
                                
                frame.getSong_playing_panel().setVisible(true);
                AudioController audio = AudioController.getIntance();                        
                audio.setPlaylist(listSong);
                audio.setCurrent_song(listSong.get(0));
                audio.setIndex(0);
                String kind = "";
                if (title.equals("Bài Hát")) 
                    kind = "Music";
                else 
                    kind = "Playlist";
                audio.setKind(kind);
                if (playlist != null)
                    audio.setId_playlist(playlist.getId());
                else 
                    audio.setId_playlist(-1);
                audio.play();
            }
        });
    }
    
    // initialize Title Panel Of PlaylistPanel Panel
    public TitlePanel( MainFrame frame, User user, String title) {
        
        initComponents();
        this.title.setText(title);
        this.play_all.setText("Tạo playlist");
        name_playlist.setVisible(false);
        btn.setVisible(false);
        
        this.play_all.addMouseListener(new MouseAdapter() {
            
            @Override
            public void mouseEntered(MouseEvent e) {
                JLabel lb = (JLabel) e.getSource();
                lb.setBackground(Color.gray);
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                JLabel lb = (JLabel) e.getSource();
                lb.setBackground(Color.black);
            }
            
            @Override
            public void mouseClicked(MouseEvent e) {
                name_playlist.setVisible(true);
                btn.setVisible(true);                               
            }
        });
        
        name_p.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                if (e.getKeyChar() == KeyEvent.VK_ENTER) 
                    addPlaylist(frame, user);
            }
        });
        
        btn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addPlaylist(frame, user);                                
            }            
        });
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        play_all = new javax.swing.JLabel();
        name_playlist = new javax.swing.JPanel();
        name_p = new javax.swing.JTextField();
        btn = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));

        title.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setText("Title");

        play_all.setBackground(new java.awt.Color(0, 0, 0));
        play_all.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        play_all.setForeground(new java.awt.Color(255, 255, 255));
        play_all.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        play_all.setOpaque(true);

        javax.swing.GroupLayout name_playlistLayout = new javax.swing.GroupLayout(name_playlist);
        name_playlist.setLayout(name_playlistLayout);
        name_playlistLayout.setHorizontalGroup(
            name_playlistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(name_p, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
        );
        name_playlistLayout.setVerticalGroup(
            name_playlistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(name_p)
        );

        btn.setText("OK");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(play_all, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(name_playlist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(btn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(name_playlist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(play_all, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn;
    private javax.swing.JTextField name_p;
    private javax.swing.JPanel name_playlist;
    private javax.swing.JLabel play_all;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
    private void addPlaylist(MainFrame frame, User user) {                
        if (!name_p.getText().trim().equals("")) {
            PlaylistQuery query = new PlaylistQuery();
            boolean ok = true;
            try {
                ok = query.add_playlist(user, name_p.getText().trim());
            } catch (SQLException ex) {
                Logger.getLogger(TitlePanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (ok) {
                name_playlist.setVisible(false);
                btn.setVisible(false);

                PlaylistQuery pq = new PlaylistQuery();
                ArrayList<Playlist> pl = null;
                try {
                    pl = pq.getPlaylistsByUser(user);
                } catch (SQLException ex) {
                    Logger.getLogger(TitlePanel.class.getName()).log(Level.SEVERE, null, ex);
                }

                ViewController controller = new ViewController(frame);
                controller.setPlayLists(pl);
                frame.revalidate();
                JOptionPane.showMessageDialog(null, "Đã tạo playlist" + name_p.getText());
            } else {
                JOptionPane.showMessageDialog(null, "Playlist " + name_p.getText() + " đã tồn tại");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nhập tên playlist");
        }
    }
    public String getTitle() {
        return title.getText();
    }
    public void setTitle(String s) {
        title.setText(s);
    }
    public ArrayList<Playlist> getPlaylists() {
        return playlists;
    }
}
